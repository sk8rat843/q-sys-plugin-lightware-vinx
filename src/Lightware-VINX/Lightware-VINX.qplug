-- Information block for the plugin
PluginInfo = {
  Name = "Lightware~VINX (v1.0)",
  Version = "1.0.0.0",
  Id = "5d2402d7-9d4f-40ab-a8f6-0cddf404b1bb",
  Description = "Control for Lightware VINX",
  ShowDebug = false,
  Author = "Isaac Porter"
}

-- Resources
local Colors = {
	lightware_red = {157, 11, 14},
	lightware_black = {28, 40, 52},
	White = {255, 255, 255},
	Black = {0, 0, 0},
	Red = {255, 0, 0},
	Green = {0, 255, 0}
}

input_count = 1
output_count = 1
model = "No Model Selected"

-- Define the color of the plugin object in the design
function GetColor(props)
  return Colors.lightware_red
end

-- Optional function used if plugin has multiple pages
PageNames = { "Display" }  --List the pages within the plugin  { "Page1", "Page2" }
function GetPages(props)
  local pages = {}
  for ix,name in ipairs(PageNames) do
    table.insert(pages, {name = PageNames[ix]})
  end
  return pages
end

-- Optional function to define model if plugin supports more than one model
function GetModel(props)
  local model = {}
 return model
end

-- Define User configurable Properties of the plugin
function GetProperties()
  local props = {}
  table.insert(props, {
    Name = "IP Address",
    Type = "string",
    Value = "127.0.0.1"
  })
  table.insert(props, {
    Name = "Model",
    Type = "enum",
    Choices = {"120-HDMI-ENC", "120AP-HDMI-ENC", "120AP-HDMI-ENC-DNT", "210AP-HDMI-ENC", "110-HDMI-DEC", "110AP-HDMI-DEC"},
    Value = "120-HDMI-ENC"
  })
  
  
  return props
end

-- Optional function to define pins on the plugin that are not connected to a Control
function GetPins(props)
  local pins = {}
  return pins
end

-- Optional function to update available properties when properties are altered by the user
function RectifyProperties(props)
  return props
end

-- Optional function to define components used within the plugin
function GetComponents(props)
  local components = {}
  -- Optional function to define components used within the plugin
  function GetComponents(props)
    local components = {}
    return components
  end
  return components
end

-- Optional function to define wiring of components used within the plugin
function GetWiring(props)
  local wiring = {}
  return wiring
end

-- Defines the Controls used within the plugin
function GetControls(props)
  local ctrls = {}
  ctrls = {
    -- System Pins
    {
        Name = "online",
        ControlType = "Indicator",
        IndicatorType = "Led",
        PinStyle = "Output",
        Count = 1,
        UserPin = true
    },
    {
        Name = "ip_address",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Both",
        Count = 1,
        UserPin = true
    },
    {
        Name = "model",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Output",
        Count = 1,
        UserPin = true
    },
    {
        Name = "serial_number",
        ControlType = "Indicator",
        IndicatorType = "Text",
        PinStyle = "Output",
        Count = 1,
        UserPin = true
    },
    {
        Name = "input_01_sync",
        ControlType = "Indicator",
        IndicatorType = "Led",
        PinStyle = "Output",
        Count = 1,
        UserPin = true
    },
    {
        Name = "input_02_sync",
        ControlType = "Indicator",
        IndicatorType = "Led",
        PinStyle = "Output",
        Count = 1,
        UserPin = true
    },
    {
        Name = "video_channel_id",
        ControlType = "Text",
        IndicatorType = "Text",
        PinStyle = "Both",
        Count = 1,
        UserPin = true
    }
  }
  return ctrls
end

--Layout of controls and graphics for the plugin UI to display
function GetControlLayout(props)
  local layout = {}
  local graphics = {}
  model = props["Model"].Value
  local layout = {}
  local title_size = {224, 32}
  local btn_size = {32, 24}
  local prop_size = {64,54}
  local status_groupbox_size = {title_size[1], 5*btn_size[2]}
  local VINX_groupbox_position = {0, title_size[2] + status_groupbox_size[2] + (0.5 * btn_size[2])}
  local VINX_groupbox_size = {title_size[1], 5*btn_size[2]}
  
  graphics = {
      {
        Type = "Header",
        Text = "Lightware VINX",
        HTextAlign = "Center",
        Color = Colors.lightware_red,
        FontSize = 16,
        Position = {0, 0},
        Size = title_size
      },
      {
        Type = "GroupBox",
        Text = "Status",
        HTextAlign = "Left",
        Fill = Colors.lightware_black,
        CornerRadius = 8,
        StrokeColor = Colors.lightware_red,
        Color = Colors.lightware_red,
        StrokeWidth = 1,
        Position = {0, title_size[2]},
        Size = status_groupbox_size
      },
      {
        Type = "Text",
        Text = "Online:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Bold",
        HTextAlign = "Right",
        Color = Colors.White,
        Position = {0, title_size[2] + (0.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      },
      {
        Type = "Text",
        Text = "IP Address:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Bold",
        HTextAlign = "Right",
        Color = Colors.White,
        Position = {0, title_size[2] + (1.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      },
      {
        Type = "Text",
        Text = "Model:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Bold",
        HTextAlign = "Right",
        Color = Colors.White,
        Position = {0, title_size[2] + (2.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      },
      {
        Type = "Text",
        Text = "Serial Number:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Bold",
        HTextAlign = "Right",
        Color = Colors.White,
        Position = {0, title_size[2] + (3.5 * btn_size[2])},
        Size = {3 * btn_size[1], btn_size[2]}
      },
      {
        Type = "GroupBox",
        Text = "VINX",
        HTextAlign = "Left",
        Fill = Colors.lightware_black,
        CornerRadius = 8,
        StrokeColor = Colors.lightware_red,
        Color = Colors.lightware_red,
        StrokeWidth = 1,
        Position = VINX_groupbox_position,
        Size = VINX_groupbox_size
      },
      {
        Type = "Text",
        Text = "Video Channel Id:",
        Font = "Roboto",
        FontSize = 12,
        FontStyle = "Bold",
        HTextAlign = "Right",
        Color = Colors.White,
        Position = {VINX_groupbox_position[1], (VINX_groupbox_position[2] + (btn_size[2]))},
        Size = {3 * btn_size[1], btn_size[2]}
      }
  }
  if string.find(model, "ENC") then
      table.insert(
          graphics,
          {
            Type = "Text",
            Text = "Input 01 Sync:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {VINX_groupbox_position[1], (VINX_groupbox_position[2] +  (2 * btn_size[2]))},
            Size = {3 * btn_size[1], btn_size[2]}
          }
      )
  end
  if string.find(model, "210") then
      table.insert(
          graphics,
          {
            Type = "Text",
            Text = "Input 02 Sync:",
            Font = "Roboto",
            FontSize = 12,
            FontStyle = "Bold",
            HTextAlign = "Right",
            Color = Colors.White,
            Position = {VINX_groupbox_position[1], (VINX_groupbox_position[2] +  (3 * btn_size[2]))},
            Size = {3 * btn_size[1], btn_size[2]}
          }
      )
  end
  -- System
  layout["online"] = {
      PrettyName = "System~Online",
      Style = "Indicator",
      Color = {0, 255, 0},
      Position = {3 * btn_size[1], title_size[2] + (0.5 * btn_size[2])},
      Size = {btn_size[2], btn_size[2]}
  }
  layout["ip_address"] = {
      PrettyName = "System~IP Address",
      Style = "Text",
      Position = {3 * btn_size[1], title_size[2] + (1.5 * btn_size[2])},
      Size = {3 * btn_size[1], btn_size[2]}
  }
  layout["model"] = {
      PrettyName = "System~Model Name",
      Style = "Text",
      Position = {3 * btn_size[1], title_size[2] + (2.5 * btn_size[2])},
      Size = {3 * btn_size[1], btn_size[2]}
  }
  layout["serial_number"] = {
      PrettyName = "System~Serial Number",
      Style = "Text",
      Position = {3 * btn_size[1], title_size[2] + (3.5 * btn_size[2])},
      Size = {3 * btn_size[1], btn_size[2]}
  }
  layout["video_channel_id"] = {
      PrettyName = "Video Channel Id",
      Style = "Text",
      Position = {3 * btn_size[1], title_size[2] + (6.5 * btn_size[2])},
      Size = {3 * btn_size[1], btn_size[2]}
  }
  if string.find(model, "ENC") then
      layout["input_01_sync"] = {
          PrettyName = "Input 01~Sync",
          Style = "Indicator",
          Color = {0, 255, 0},
          Position = {3 * btn_size[1], title_size[2] + (7.5 * btn_size[2])},
          Size = {btn_size[2], btn_size[2]}
      }
  end
  if string.find(model, "210") then
      layout["input_02_sync"] = {
          PrettyName = "Input 02~Sync",
          Style = "Indicator",
          Color = {0, 255, 0},
          Position = {3 * btn_size[1], title_size[2] + (8.5 * btn_size[2])},
          Size = {btn_size[2], btn_size[2]}
      }
  end
  return layout, graphics
end

--Start event based logic
if Controls then
  -- Local Structure for holding State
  LW3 = {
    Host = "",
    Port = 6107,
    Rx = ""
  }
  
  -- Build TCP Client
  conn = TcpSocket.New()
  conn.ReadTimeout = 0
  conn.WriteTimeout = 0
  conn.ReconnectTimeout = 5
  
  -- Create and setup the Communications Timeout
  timerComms = Timer.New()
  timerComms.EventHandler = function(timer)
    timer:Stop()
    Controls.online.Boolean = false
    print("Connection Timed Out")
    conn:Disconnect()
    fnConnect()
  end
  
  -- Create and setup Polling
  timerPoll = Timer.New()
  
  timerPoll.EventHandler = function(timer)
    fnPoll()
  end
  
  function fnInitPoll()
    timerPoll:Stop()
    timerPoll:Start(20)
  end
  
  function fnPoll()
    -- No need for Polling - tested device returns UpTime each second
    --fnSend("GET", "/.*")
  end
  
  -- Data Sending Helper Function
  function fnSend(cmd, arg)
    -- Build Packet
    local toSend = cmd .. " " .. arg
    -- Send to device
    print("-->LW::" .. toSend)
    conn:Write(toSend .. "\x0D\x0A")
    -- Reset Polling
    fnInitPoll()
  end
  
  function make_switch(inp, outp)
    fnSend("SET", string.format("/SYS/MB/PHY.VideoChannelId=%i", inp))
  end
  
  -- Setup Utility Callbacks as required
  conn.Connected = function(conn)
    print("TCP socket is connected")
  
    -- Get Meta Data
    fnSend("GET", "/.*")
  
    -- Get and Subscribe to System State Data
    fnSend("GET", "/SYS")
    fnSend("OPEN", "/SYS")
  
    -- Enable Routing from this Module
    fnSend("SET", "/MANAGEMENT/MULTICAST.MulticastMode=true")
    fnSend("SET", "/SYS/MB/GPIO.DipSwitchEnable=false")
  
    -- Get and Subscribe to Video Routing Data
    fnSend("GET", "/SYS/MB/PHY.VideoChannelId")
    fnSend("OPEN", "/SYS/MB/PHY.VideoChannelId")
    fnSend("GET", "/MEDIA/VIDEO/I1")
    fnSend("OPEN", "/MEDIA/VIDEO/I1")
    -- Get and Subscribe to Input Sync Data (Encoders Only)
    fnSend("GET", "/MEDIA/VIDEO/I1")
    fnSend("OPEN", "/MEDIA/VIDEO/I1")
    if(string.find(model, "210")) then
        fnSend("GET", "/MEDIA/VIDEO/I2")
        fnSend("OPEN", "/MEDIA/VIDEO/I2")
    end
    make_switch(Controls["video_channel_id"].String)
  end
  conn.Reconnect = function(conn)
    print("TCP socket is reconnecting to " .. LW3.Host)
  end
  conn.Closed = function(conn)
    print("TCP socket was closed by the remote end")
  end
  conn.Error = function(conn, err)
    print("TCP socket had an error:" .. err)
  end
  conn.Timeout = function(conn, err)
    print("TCP socket timed out:" .. err)
  end
  
  -- Helper Function - Open TCP Connection
  function fnConnect()
    print("TCP Socket Connecting")
    -- Open Connection
    conn:Connect(LW3.Host, LW3.Port)
    -- Set IP address value
    if Controls.ip_address then
        Controls.ip_address.String = LW3.Host
    end
  end
  
  local function split(str, delim)
    local result = {}
    for part in str:gmatch("[^" .. delim .. "]+") do
        result[#result + 1] = part
    end
    return result
  end
  
  -- Setup Data Callbacks as required
  conn.Data = function(conn)
    -- Read out lines from the buffer
    line = conn:ReadLine(TcpSocket.EOL.Any)
    while (line ~= nil) do
        --print(line)
        -- Remove the header
        x = line:find(" ")
        if x ~= nil then
            line = line:sub(x + 1)
        end
        -- Get Path if "." is present
        x = line:find("%.")
        y = line:find("%=")
        if x ~= nil and y ~= nil then
            path = line:sub(1, x - 1)
            func = line:sub(x + 1, y - 1)
            val = line:sub(y + 1)
            -- Select Command Path'
            if path == "/" then -- Root
                -- System Status
                -- Part Number
                if func == "ProductPartNumber" then
                --Controls.PartNumber.String = val
                end
                -- Serial Number
                if func == "SerialNumber" then
                    Controls.serial_number.String = val
                end
                -- Product Name
                if func == "ProductName" then
                    Controls.model.String = val
                end
            elseif path == "/SYS" then -- Management Status
                -- Uptime
                if func == "UpTime" then
                    --Controls.UpTime.Value = val
                    -- Stop and restart Comms timer
                    timerComms:Stop()
                    if Controls.online then -- Check for when developing in a Control Script block
                        Controls.online.Boolean = true
                    end
                    timerComms:Start(30)
                end
            elseif path == "/SYS/MB/PHY" then -- Video Stream ID
                if(func == "VideoChannelId") then
                    print("VideoChannelId: " .. val)
                    Controls["video_channel_id"].String = val
                end
            elseif path == "/MEDIA/VIDEO/I1" then -- Input 01
                if(funct == "SignalPresent") then
                    Controls["input_01_sync"].Boolean = val == "1"
                end
            elseif path == "/MEDIA/VIDEO/I2" then -- Input 02
                if(funct == "SignalPresent") then
                    Controls["input_02_sync"].Boolean = val == "1"
                end
            end
        end
        -- Read a new line
        line = conn:ReadLine(TcpSocket.EOL.Any)
    end
  end
  
  -- Set IP address from Properties if present
  if Properties then
    if Properties["IP Address"].Value ~= "" then
        LW3.Host = Properties["IP Address"].Value
        fnConnect()
    else
        print("IP Address Property Not Set")
    end
  end
  Controls["ip_address"].EventHandler = function()
    LW3.Host = Controls["ip_address"].String
    fnConnect()
  end
  Controls["video_channel_id"].EventHandler = function()
    make_switch(Controls["video_channel_id"].String)
  end
end
